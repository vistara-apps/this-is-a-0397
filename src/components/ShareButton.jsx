import React, { useState } from 'react';
import { Share2, Lock, Download, Mail, MessageSquare, Check, FileText } from 'lucide-react';
import { downloadInteractionSummary, shareInteractionSummary, copyTextSummary } from '../services/pdfService';

const ShareButton = ({ variant = 'interactionSummary', log, isPremium = false, onPremiumAccess }) => {
  const [showOptions, setShowOptions] = useState(false);
  const [shared, setShared] = useState(false);

  const generateSummary = (log) => {
    return `
INTERACTION SUMMARY
==================
Date & Time: ${log.timestamp.toLocaleString()}
Location: ${log.location ? `${log.location.latitude.toFixed(4)}, ${log.location.longitude.toFixed(4)}` : 'Not recorded'}
Notes: ${log.notes || 'No additional notes'}

Generated by RightsGuard App
    `.trim();
  };

  const handleShare = async (method) => {
    if (isPremium) {
      onPremiumAccess();
      return;
    }
    
    try {
      if (method === 'copy') {
        await copyTextSummary(log);
        setShared(true);
        setTimeout(() => setShared(false), 2000);
      } else if (method === 'download-text') {
        const summary = generateSummary(log);
        const blob = new Blob([summary], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `interaction-${log.timestamp.toISOString().split('T')[0]}.txt`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
      } else if (method === 'download-pdf') {
        await downloadInteractionSummary(log);
      } else if (method === 'share-pdf') {
        await shareInteractionSummary(log);
      } else if (method === 'native') {
        const summary = generateSummary(log);
        await navigator.share({
          title: 'Interaction Summary',
          text: summary,
        });
      }
    } catch (error) {
      console.error('Failed to share:', error);
      // Show error message to user
      alert('Failed to share summary. Please try again.');
    }
    
    setShowOptions(false);
  };

  if (variant === 'interactionSummary') {
    return (
      <div className="relative">
        <button
          onClick={() => setShowOptions(!showOptions)}
          className="text-textSecondary hover:text-accent transition-colors p-2"
        >
          {isPremium ? <Lock className="w-5 h-5" /> : <Share2 className="w-5 h-5" />}
        </button>

        {showOptions && (
          <>
            {/* Backdrop */}
            <div 
              className="fixed inset-0 z-10"
              onClick={() => setShowOptions(false)}
            />
            
            {/* Options Menu */}
            <div className="absolute top-full right-0 mt-2 w-48 bg-surface rounded-lg shadow-card border border-bg z-20">
              {isPremium ? (
                <div className="p-4">
                  <div className="flex items-center gap-3 mb-3">
                    <Lock className="w-5 h-5 text-accent" />
                    <span className="text-sm text-textPrimary">Premium Feature</span>
                  </div>
                  <button 
                    onClick={onPremiumAccess}
                    className="btn-primary w-full text-sm"
                  >
                    Upgrade to Share
                  </button>
                </div>
              ) : (
                <div className="p-2">
                  <button
                    onClick={() => handleShare('copy')}
                    className="w-full flex items-center gap-3 px-3 py-2 text-left text-sm text-textPrimary hover:bg-bg rounded-md transition-colors"
                  >
                    {shared ? <Check className="w-4 h-4 text-green-400" /> : <MessageSquare className="w-4 h-4" />}
                    {shared ? 'Copied!' : 'Copy Summary'}
                  </button>
                  
                  <button
                    onClick={() => handleShare('download-pdf')}
                    className="w-full flex items-center gap-3 px-3 py-2 text-left text-sm text-textPrimary hover:bg-bg rounded-md transition-colors"
                  >
                    <FileText className="w-4 h-4" />
                    Download PDF
                  </button>
                  
                  <button
                    onClick={() => handleShare('download-text')}
                    className="w-full flex items-center gap-3 px-3 py-2 text-left text-sm text-textPrimary hover:bg-bg rounded-md transition-colors"
                  >
                    <Download className="w-4 h-4" />
                    Download Text
                  </button>

                  {navigator.share && (
                    <>
                      <button
                        onClick={() => handleShare('share-pdf')}
                        className="w-full flex items-center gap-3 px-3 py-2 text-left text-sm text-textPrimary hover:bg-bg rounded-md transition-colors"
                      >
                        <Share2 className="w-4 h-4" />
                        Share PDF
                      </button>
                      <button
                        onClick={() => handleShare('native')}
                        className="w-full flex items-center gap-3 px-3 py-2 text-left text-sm text-textPrimary hover:bg-bg rounded-md transition-colors"
                      >
                        <MessageSquare className="w-4 h-4" />
                        Share Text
                      </button>
                    </>
                  )}
                </div>
              )}
            </div>
          </>
        )}
      </div>
    );
  }

  return null;
};

export default ShareButton;
