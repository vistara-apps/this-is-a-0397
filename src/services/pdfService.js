import jsPDF from 'jspdf';

export const generateInteractionSummaryPDF = async (log, userInfo = {}) => {
  try {
    const pdf = new jsPDF();
    const pageWidth = pdf.internal.pageSize.getWidth();
    const margin = 20;
    let yPosition = 30;

    // Header
    pdf.setFontSize(20);
    pdf.setFont(undefined, 'bold');
    pdf.text('RightsGuard - Interaction Summary', margin, yPosition);
    
    yPosition += 20;
    pdf.setFontSize(12);
    pdf.setFont(undefined, 'normal');
    pdf.text(`Generated on: ${new Date().toLocaleString()}`, margin, yPosition);
    
    yPosition += 20;
    
    // Interaction Details
    pdf.setFontSize(16);
    pdf.setFont(undefined, 'bold');
    pdf.text('Interaction Details', margin, yPosition);
    
    yPosition += 15;
    pdf.setFontSize(12);
    pdf.setFont(undefined, 'normal');
    
    // Date and Time
    pdf.text('Date & Time:', margin, yPosition);
    pdf.text(new Date(log.timestamp).toLocaleString(), margin + 50, yPosition);
    yPosition += 10;
    
    // Location (if available)
    if (log.location) {
      pdf.text('Location:', margin, yPosition);
      pdf.text(`${log.location.latitude.toFixed(6)}, ${log.location.longitude.toFixed(6)}`, margin + 50, yPosition);
      yPosition += 10;
    }
    
    // Duration (if available)
    if (log.duration) {
      pdf.text('Duration:', margin, yPosition);
      pdf.text(log.duration, margin + 50, yPosition);
      yPosition += 10;
    }
    
    yPosition += 10;
    
    // Notes Section
    if (log.notes && log.notes.trim()) {
      pdf.setFontSize(16);
      pdf.setFont(undefined, 'bold');
      pdf.text('Notes', margin, yPosition);
      
      yPosition += 15;
      pdf.setFontSize(12);
      pdf.setFont(undefined, 'normal');
      
      // Split notes into lines that fit the page width
      const noteLines = pdf.splitTextToSize(log.notes, pageWidth - 2 * margin);
      noteLines.forEach(line => {
        if (yPosition > 270) { // Check if we need a new page
          pdf.addPage();
          yPosition = 30;
        }
        pdf.text(line, margin, yPosition);
        yPosition += 7;
      });
      
      yPosition += 10;
    }
    
    // Legal Disclaimer
    yPosition += 10;
    pdf.setFontSize(14);
    pdf.setFont(undefined, 'bold');
    pdf.text('Important Legal Notice', margin, yPosition);
    
    yPosition += 15;
    pdf.setFontSize(10);
    pdf.setFont(undefined, 'normal');
    
    const disclaimer = [
      'This document is generated by RightsGuard for informational purposes only.',
      'It does not constitute legal advice and should not be used as a substitute for',
      'professional legal counsel. If you need legal assistance, please consult with',
      'a qualified attorney in your jurisdiction.',
      '',
      'The information contained in this summary is based on user input and may not',
      'be complete or accurate. RightsGuard makes no warranties regarding the',
      'accuracy or completeness of this information.'
    ];
    
    disclaimer.forEach(line => {
      if (yPosition > 270) {
        pdf.addPage();
        yPosition = 30;
      }
      pdf.text(line, margin, yPosition);
      yPosition += 5;
    });
    
    // Footer
    const pageCount = pdf.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      pdf.setPage(i);
      pdf.setFontSize(8);
      pdf.setFont(undefined, 'normal');
      pdf.text(
        `Page ${i} of ${pageCount} - Generated by RightsGuard`,
        pageWidth / 2,
        pdf.internal.pageSize.getHeight() - 10,
        { align: 'center' }
      );
    }
    
    return pdf;
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error('Failed to generate PDF summary');
  }
};

export const downloadInteractionSummary = async (log, filename) => {
  try {
    const pdf = await generateInteractionSummaryPDF(log);
    const pdfName = filename || `interaction-summary-${new Date(log.timestamp).toISOString().split('T')[0]}.pdf`;
    pdf.save(pdfName);
  } catch (error) {
    console.error('Error downloading PDF:', error);
    throw error;
  }
};

export const shareInteractionSummary = async (log) => {
  try {
    const pdf = await generateInteractionSummaryPDF(log);
    const pdfBlob = pdf.output('blob');
    
    // Check if Web Share API is supported
    if (navigator.share && navigator.canShare) {
      const file = new File([pdfBlob], `interaction-summary-${Date.now()}.pdf`, {
        type: 'application/pdf'
      });
      
      if (navigator.canShare({ files: [file] })) {
        await navigator.share({
          title: 'RightsGuard Interaction Summary',
          text: 'Interaction summary generated by RightsGuard',
          files: [file]
        });
        return { success: true, method: 'native' };
      }
    }
    
    // Fallback: Create download link
    const url = URL.createObjectURL(pdfBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `interaction-summary-${new Date(log.timestamp).toISOString().split('T')[0]}.pdf`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
    
    return { success: true, method: 'download' };
  } catch (error) {
    console.error('Error sharing PDF:', error);
    throw error;
  }
};

export const generateTextSummary = (log) => {
  const timestamp = new Date(log.timestamp).toLocaleString();
  const location = log.location 
    ? `Location: ${log.location.latitude.toFixed(6)}, ${log.location.longitude.toFixed(6)}\n`
    : '';
  
  const notes = log.notes && log.notes.trim() 
    ? `Notes:\n${log.notes}\n\n`
    : '';
  
  return `RightsGuard Interaction Summary
Generated: ${new Date().toLocaleString()}

Interaction Details:
Date & Time: ${timestamp}
${location}${notes}

This summary was generated by RightsGuard for documentation purposes.
For legal advice, please consult with a qualified attorney.`;
};

export const copyTextSummary = async (log) => {
  try {
    const textSummary = generateTextSummary(log);
    
    if (navigator.clipboard && navigator.clipboard.writeText) {
      await navigator.clipboard.writeText(textSummary);
      return { success: true, method: 'clipboard' };
    }
    
    // Fallback for older browsers
    const textArea = document.createElement('textarea');
    textArea.value = textSummary;
    textArea.style.position = 'fixed';
    textArea.style.opacity = '0';
    document.body.appendChild(textArea);
    textArea.select();
    document.execCommand('copy');
    document.body.removeChild(textArea);
    
    return { success: true, method: 'fallback' };
  } catch (error) {
    console.error('Error copying text summary:', error);
    throw error;
  }
};
